#!/usr/bin/env node
'use strict';

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

try {
  require.resolve('@pkmn/smogon');
  require.resolve('@pkmn/sim');
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
  console.error('@pkmn/smogon and @pkmn/sim must be installed to use the CLI');
  process.exit(2);
}

const https = require('https');
const url = require('url');

const {Dex} = require('@pkmn/sim');
const {Generations} = require('@pkmn/data');
const {Smogon} = require('@pkmn/smogon');
const dmg = require('./build');

function fetch(u) {
  return new Promise((resolve, reject) => {
    let data = '';
    const req = https.get(u, res => {
      if (res.statusCode !== 200) {
        if (res.statusCode >= 300 && res.statusCode <= 400 && res.headers.location) {
          return resolve(fetch(url.resolve(u, res.headers.location)));
        } else {
          return reject(new Error(`HTTP ${res.statusCode}`));
        }
      }
      res.on('data', d => {
        data += d;
      });
      res.on('end', () => resolve({json: () => Promise.resolve(data)}));
    });
    req.on('error', reject);
    req.end();
  });
}

const gens = new Generations(Dex);
const smogon = new Smogon(fetch);

try {
  (async () => {
    const argv = process.arv.slice(2);

    const format = /^gen[1-8][a-z0-9]+/.test(argv[0]) ? argv.shift() : undefined;
    let gen = format ? gens.get(Number(format.charAt(3))) : undefined;
    const state = dmg.parse(gen || gens, argv.join(' '));
    gen = gen || state.gen;

    dmg.State.mergeSet(
      state.p1.pokemon,
      state.move.id,
      ...(await smogon.sets(gen, state.p1.pokemon.species, format, true))
    );
    dmg.State.mergeSet(
      state.p2.pokemon,
      ...(await smogon.sets(gen, state.p2.pokemon.species, format, true))
    );

    const result = dmg.calculate(state);
    if (process.stdout.isTTY) console.log(`\x1b[90m(${dmg.encode(result.state)})\x1b[0m`);
    console.log(result);
  })();
} catch (e) {
  console.error(e.message);
  process.exit(1);
}
